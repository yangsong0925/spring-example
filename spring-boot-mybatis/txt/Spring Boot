Spring Boot 配置外部属性:
    YAML 是 JSON 的一个超集，将外部配置以层次结构存储起来。( 当项目的类路径中有 SnakeYAML 库 <spring-boot-stater 中已经包含>时，SpringApplication 类自动致辞 YAML作为 properties 的替代。)
    文件后缀: .yml 或 .yaml

    YAML 和 properties 的区别:
        1.在 properties 中 "." 进行分割，YAML使用 ":" 分割。
        2.YAML 是 K-V 数据格式，通过 ":" 进行复制。
        3.每个 K 冒号都要加一个空格，否则报错。



   WebMvcConfigurationSupport 和 WebMvcConfigurer 配置区别：
        spring boot2.0之后在构造spring配置文件时 实现 WebMvcConfigurer，继承 WebMvcConfigurationSupport 类是会导致自动配置失效的。

        一. WebMvcConfigurationSupport

            1. 继承 WebMvcConfigurationSupport 类是会导致自动配置失效的原因:
                在spring boot的自定义配置类继承 WebMvcConfigurationSupport 后，发现自动配置的静态资源路径
                （classpath:/META/resources/，classpath:/resources/，classpath:/static/，classpath:/public/）不生效。

               web 自动配置类 WebMvcAutoConfiguration 定义：

                    @ConditionalOnMissingBean({WebMvcConfigurationSupport.class})
                    注解的意思是在项目类路径中 缺少 WebMvcConfigurationSupport类型的bean时改自动配置类才会生效，所以继承 WebMvcConfigurationSupport 后需要自己再重写相应的方法。

                        @Configuration
                        @ConditionalOnWebApplication(
                            type = Type.SERVLET
                        )
                        @ConditionalOnClass({Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class})
                        @ConditionalOnMissingBean({WebMvcConfigurationSupport.class})
                        @AutoConfigureOrder(-2147483638)
                        @AutoConfigureAfter({DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class, ValidationAutoConfiguration.class})
                        public class WebMvcAutoConfiguration {
                            public static final String DEFAULT_PREFIX = "";
                            public static final String DEFAULT_SUFFIX = "";
                            private static final String[] SERVLET_LOCATIONS = new String[]{"/"};

                            public WebMvcAutoConfiguration() {
                            }

                            @Bean
                            @ConditionalOnMissingBean({HiddenHttpMethodFilter.class})
                            @ConditionalOnProperty(
                                prefix = "spring.mvc.hiddenmethod.filter",
                                name = {"enabled"},
                                matchIfMissing = true
                            )
                            public OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {
                                return new OrderedHiddenHttpMethodFilter();
                            }
                            ...
                        }

                    如果想要使用自动配置生效，又要按自己的需要重写某些方法，比如增加 viewController ，则可以自己的配置类可以继承 WebMvcConfigurerAdapter 这个类。
                    不过在spring5.0版本后这个类被丢弃了 WebMvcConfigurerAdapter，但还是可以用。丢弃的原因:意思是spring 5.0后要使用Java8，而在Java8中接口是可以有default方法的，
                    所以我们只需要在自定义配置类中直接实现。

                        public interface WebMvcConfigurer {
                            @Nullable
                            default Validator getValidator() {
                                return null;
                            }

                            @Nullable
                            default MessageCodesResolver getMessageCodesResolver() {
                                return null;
                            }
                            ...
                        }

            2. 继承 WebMvcConfigurationSupport类如何配置拦截器:

                注意：
                    registry.addResourceHandler("/**").addResourceLocations("classpath:/static/");
                    由于继承WebMvcConfigurationSupport后会导致自动配置失效，所以这里要指定默认的静态资源的位置。同时要注意不能写成
                        registry.addResourceHandler("/static/**").addResourceLocations("classpath:/static/");

                @Configuration
                public class MyConfigurer extends WebMvcConfigurationSupport {

                    @Override
                    protected void addInterceptors(InterceptorRegistry registry) {
                       registry.addInterceptor(new MyInterceptor()).addPathPatterns("/**").excludePathPatterns("/emp/toLogin","/emp/login","/js/**","/css/**","/images/**");
                        super.addInterceptors(registry);
                    }

                    @Override
                    protected void addResourceHandlers(ResourceHandlerRegistry registry) {
                        registry.addResourceHandler("/**").addResourceLocations("classpath:/static/");
                        super.addResourceHandlers(registry);
                    }
                }

        一. WebMvcConfigurer

            1. WebMvcConfigurer api :
                package org.springframework.web.servlet.config.annotation;
                public interface WebMvcConfigurer {
                    void configurePathMatch(PathMatchConfigurer var1);

                    void configureContentNegotiation(ContentNegotiationConfigurer var1);

                    void configureAsyncSupport(AsyncSupportConfigurer var1);

                    void configureDefaultServletHandling(DefaultServletHandlerConfigurer var1);

                    void addFormatters(FormatterRegistry var1);

                    void addInterceptors(InterceptorRegistry var1);

                    void addResourceHandlers(ResourceHandlerRegistry var1);

                    void addCorsMappings(CorsRegistry var1);

                    void addViewControllers(ViewControllerRegistry var1);

                    void configureViewResolvers(ViewResolverRegistry var1);

                    void addArgumentResolvers(List<HandlerMethodArgumentResolver> var1);

                    void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> var1);

                    void configureMessageConverters(List<HttpMessageConverter<?>> var1);

                    void extendMessageConverters(List<HttpMessageConverter<?>> var1);

                    void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> var1);

                    void extendHandlerExceptionResolvers(List<HandlerExceptionResolver> var1);

                    Validator getValidator();

                    MessageCodesResolver getMessageCodesResolver();
                }

                其中重要的方法:

                    /* 拦截器配置 */
                    void addInterceptors(InterceptorRegistry var1);
                    /* 视图跳转控制器 */
                    void addViewControllers(ViewControllerRegistry registry);
                    /* 静态资源处理 */
                    void addResourceHandlers(ResourceHandlerRegistry registry);
                    /* 默认静态资源处理器 */
                    void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer);
                    /* 这里配置视图解析器 */
                    void configureViewResolvers(ViewResolverRegistry registry);
                    /* 配置内容裁决的一些选项*/
                    void configureContentNegotiation(ContentNegotiationConfigurer configurer);

            2. WebMvcConfigurer 部分方法使用：

                2.1 页面跳转 addViewControllers

                    /**
                     * 以前要访问一个页面需要先创建个Controller控制类，再写方法跳转到页面
                     * 在这里配置后就不需要那么麻烦了，直接访问http://localhost:8080/toLogin就跳转到login.jsp页面了
                     * @param registry
                     */
                    @Override
                    public void addViewControllers(ViewControllerRegistry registry) {
                        registry.addViewController("/toLogin").setViewName("login");

                    }
                    重写addViewControllers方法，并不会覆盖WebMvcAutoConfiguration中的addViewControllers（在此方法中，Spring Boot将“/”映射至index.html,2.0 我并没有发现有此方法），
                    这也就意味着我们自己的配置和Spring Boot的自动配置同时有效，这也是我们推荐添加自己的MVC配置的方式。

                2.2 自定义资源映射 addResourceHandlers

                    自定义静态资源映射目录的话，只需重写addResourceHandlers方法即可。
                    注：如果继承 WebMvcConfigurationSupport 类实现配置时必须要重写该方法，可参考上面 WebMvcConfigurationSupport。

                    addResourceHandler添加映射路径，然后通过addResourceLocations来指定路径
                    addResourceLocations指的是文件放置的目录，addResoureHandler指的是对外暴露的访问路径

                    访问自定义my文件夹中的elephant.jpg 图片的地址为 http://localhost:8080/my/elephant.jpg
                    @Configuration
                    public class MyWebMvcConfigurerAdapter implements WebMvcConfigurer {
                        /**
                         * 配置静态访问资源
                         * @param registry
                         */
                        @Override
                        public void addResourceHandlers(ResourceHandlerRegistry registry) {
                            registry.addResourceHandler("/my/**").addResourceLocations("classpath:/my/");

                        }
                    }

                    指定外部的目录也很简单，直接addResourceLocations指定即可，代码如下：

                    @Override
                    public void addResourceHandlers(ResourceHandlerRegistry registry) {
                        registry.addResourceHandler("/my/**").addResourceLocations("file:E:/my/");

                    }


    Maven插件系列之spring-boot-maven-plugin:
        资料：https://www.cnblogs.com/liaojie970/p/9007577.html

        Spring Boot的Maven插件（Spring Boot Maven plugin）能够以Maven的方式为应用提供Spring Boot的支持，即为Spring Boot应用提供了执行Maven操作的可能。
        Spring Boot Maven plugin能够将Spring Boot应用打包为可执行的jar或war文件，然后以通常的方式运行Spring Boot应用。
        Spring Boot Maven plugin的最新版本为2017.6.8发布的1.5.4.RELEASE，要求Java 8, Maven 3.2及以后。

        Spring Boot Maven plugin的5个Goals
            spring-boot:repackage，默认goal。在mvn package之后，再次打包可执行的jar/war，同时保留mvn package生成的jar/war为.origin
            spring-boot:run，运行Spring Boot应用
            spring-boot:start，在mvn integration-test阶段，进行Spring Boot应用生命周期的管理
            spring-boot:stop，在mvn integration-test阶段，进行Spring Boot应用生命周期的管理
            spring-boot:build-info，生成Actuator使用的构建信息文件build-info.properties

    Spring Boot 打包方式:
        jar :
            1. 指定 mainClass,避免 java -jar xxx.jar 报错无法加载主类。

                 <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>1.5.4.RELEASE</version>
                    <configuration>
                        <mainClass>com.sys.SpringBootAmqApplication</mainClass>
                    </configuration>
                </plugin>
            2. idea Lifecycle -> install,Lifecycle lifecycle是maven中一个十分完善的生命周期模型，所以使用Lifecycle中的install项目就会自动去maven仓库下载需要的包。


